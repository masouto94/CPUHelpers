#include <LiquidCrystal_I2C.h>
#include <Wire.h>
#include "secretCode.h"
#define BLUEPIN 9
#define REDPIN 10
#define GREENPIN 5
#define POTE A1
#define BOTON1 3
#define BOTON2 7

char* B="";

LiquidCrystal_I2C pantalla(0x27,16,2);//para el display PCF8574 (consultar si es este el que vamso a usar).
/*
class RGBColor{
// El objeto RGBColor tiene los valores de red green y blue.
    public:
        int red;
        int green;
        int blue;
		
        RGBColor();
        RGBColor(int redValue, int greenValue, int blueValue)
        : red(redValue), green(greenValue),blue(blueValue)
        {}
    };


class ColorFactory{
  //Funciones que retornan el color en rgb.
  //Poniendo ColorFactory:: y el color, devuelve el rgb.
  public:
  static class RGBColor Yellow(){
    return RGBColor(255, 235, 59);
  }
   static class RGBColor White(){
    return RGBColor(250, 250, 250);
  }
   static class RGBColor Orange(){
    return RGBColor(245, 127, 23);
  }
   static class RGBColor Green(){
    return RGBColor(0, 255, 0);
  }
  static class RGBColor Blue(){
    return RGBColor(0, 0, 255);
  }
  static class  RGBColor Red(){
    return RGBColor(255, 0, 0);
   }
  static class  RGBColor Violet(){
    return RGBColor(120, 40, 140);
   }
};
*/
void setColor(RGBColor &color){
	analogWrite(REDPIN, color.red);
    analogWrite(GREENPIN, color.green);
    analogWrite(BLUEPIN, color.blue);
}

//Fija el color segÃºn lo que mida el pote.
void renderColor(int poteInput){
  //El pote llega hasta 1023

  if (poteInput >=4 && poteInput <= 171){
    RGBColor color = ColorFactory::White();
    setColor(color);
    B="white";
    
  } else if (poteInput > 171 && poteInput <= 341){
    RGBColor color = ColorFactory::Yellow();
    setColor(color);
    //B = color.name;
    B="yellow";
  } else if (poteInput > 341 && poteInput <= 511){
    RGBColor color = ColorFactory::Orange();
    setColor(color);
  } else if (poteInput > 511 && poteInput <= 681){
    RGBColor color = ColorFactory::Red();
    setColor(color);
  } else if (poteInput > 681 && poteInput <= 851){
    RGBColor color = ColorFactory::Blue();
    setColor(color);
  } else if (poteInput > 851 && poteInput <= 1021){
    RGBColor color = ColorFactory::Green();
    setColor(color);
  } else if (poteInput > 1021 && poteInput <= 1023){
    RGBColor color = ColorFactory::Violet();
    setColor(color);
  }
}  


int A=0,C=0;

void setup()
{
  
  pantalla.init();//inicia el display.
  pantalla.backlight();//prende los leds del display.
  
  pinMode(REDPIN, OUTPUT);
  pinMode(GREENPIN, OUTPUT);
  pinMode(BLUEPIN, OUTPUT);
  pinMode(POTE, INPUT);
  pinMode(BOTON1,INPUT);
  pinMode(BOTON2,INPUT);
  Serial.begin(9600);
  
}

void loop()
{
  int pote=analogRead(POTE);
  renderColor(pote);
  int estadoboton1=digitalRead(BOTON1);
  int estadoboton2=digitalRead(BOTON2);
  
 if ((estadoboton1==HIGH)&&(A<=16))
 {
   A=A+8;
   pantalla.setCursor(A,0);
   
 }
  
 if ((estadoboton2==HIGH)&&(A<=16))
 {
   A=A-8;
   pantalla.setCursor(A,0);
   
 }
  
  if ((estadoboton1==HIGH)&&(C<=16))
 {
   C=C+8;
   pantalla.setCursor(A,1);
   
 }
  
 if ((estadoboton2==HIGH)&&(C<=16))
 {
   C=C-8;
   pantalla.setCursor(A,1);
   
 }
  
  
  
   if (B=="yellow")
  {
  	pantalla.print("AMARILL");
     B="";
     pantalla.setCursor(A,0);
  }
  
   if (B=="white")
  {
  	pantalla.print(" BLANCO ");
     B="";
     pantalla.setCursor(A,0);
  }
 
  
  pantalla.cursor();
  delay(200);
 //pantalla.write('A');
  
}
  
  